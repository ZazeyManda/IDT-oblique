0.5 mean
0.2505694760820046 var

LINEAR REGRESSION ON SAMPLE
Debt ratio \% & 3.18\\
Current Liability to Current Assets & 1.26\\
Cash Flow to Liability & -2.01\\
Net Income to Total Assets & -1.77\\
Fixed Assets to Assets & 0.0\\

Bankrupt data if n = 50:

Constructed tree for local_global:

started at 2023-06-27 16:42:41.626311
ordermatrix:
[[0 1 1 1 1 1]
 [0 0 1 1 1 1]
 [0 0 0 1 1 1]
 [0 0 0 0 1 1]
 [0 0 0 0 0 1]
 [0 0 0 0 0 0]]
ordermatrix:
[[0 1 1 1 1]
 [0 0 1 1 1]
 [0 0 0 1 1]
 [0 0 0 0 1]
 [0 0 0 0 0]]
ordermatrix:
[[0 1 1 1]
 [0 0 1 1]
 [0 0 0 1]
 [0 0 0 0]]
Tree is traversed via depth-first traversal.
Node level) splitting rule to current node ; #data points ; impurity (Gini for classification, MSE for regression) ; average y_value (regression) or relative frequency of class 1 (classification) ; star (*) if node is leaf
0) ; root ; 50 ; 0.25 ; 0.5000000000000002 
1) ; Net Income to Total Assets <= 0.5195502325878005 ; 18 ; 0.0 ; 8.881784197001252e-16 ; *
1) ; Net Income to Total Assets > 0.5195502325878005 ; 32 ; 0.1709 ; 0.7812500000000002 
2) ; Debt ratio % <= 0.175393778154004 ; 14 ; 0.25 ; 0.5000000000000002 
3) ; 2.6078*Current Liability to Current Assets+124.8093*Cash Flow to Liability+0.5799*Fixed Assets to Assets <= 27.204811662637134 ; 10 ; 0.21 ; 0.30000000000000043 ; *
3) ; 2.6078*Current Liability to Current Assets+124.8093*Cash Flow to Liability+0.5799*Fixed Assets to Assets > 27.204811662637134 ; 4 ; 0.0 ; 1.0000000000000009 ; *
2) ; Debt ratio % > 0.175393778154004 ; 18 ; 0.0 ; 1.0000000000000009 ; *

Constructed tree for not_local_global:

started at 2023-06-27 16:42:44.041466
ordermatrix:
[[0 1 1 1 1 1 1]
 [0 0 1 1 1 1 1]
 [0 0 0 1 1 1 1]
 [0 1 1 0 1 1 1]
 [0 1 1 0 0 1 1]
 [0 1 1 0 0 0 1]
 [0 0 0 0 0 0 0]]
ordermatrix:
[[0 1 1 1 1]
 [0 0 1 1 1]
 [0 1 0 1 1]
 [0 1 0 0 1]
 [0 0 0 0 0]]
ordermatrix:
[[0 1 1 1]
 [0 0 1 1]
 [0 1 0 1]
 [0 0 0 0]]
ordermatrix:
[[0 1 1]
 [0 0 1]
 [0 0 0]]
ordermatrix:
[[0 1]
 [0 0]]
Tree is traversed via depth-first traversal.
Node level) splitting rule to current node ; #data points ; impurity (Gini for classification, MSE for regression) ; average y_value (regression) or relative frequency of class 1 (classification) ; star (*) if node is leaf
0) ; root ; 50 ; 0.25 ; 0.5000000000000002 
1) ; Net Income to Total Assets <= 0.5195502325878005 ; 18 ; 0.0 ; 1.3322676295501878e-15 ; *
1) ; Net Income to Total Assets > 0.5195502325878005 ; 32 ; 0.1709 ; 0.7812500000000004 ; *

Constructed tree for local_not_global:

started at 2023-06-27 16:42:47.037308
Tree is traversed via depth-first traversal.
Node level) splitting rule to current node ; #data points ; impurity (Gini for classification, MSE for regression) ; average y_value (regression) or relative frequency of class 1 (classification) ; star (*) if node is leaf
0) ; root ; 50 ; 0.25 ; 0.5000000000000002 
1) ; Net Income to Total Assets <= 0.5195502325878005 ; 18 ; 0.0 ; 2.220446049250313e-16 ; *
1) ; Net Income to Total Assets > 0.5195502325878005 ; 32 ; 0.1709 ; 0.7812500000000002 
2) ; Debt ratio % <= 0.175393778154004 ; 14 ; 0.25 ; 0.5000000000000002 
3) ; 2.6078*Current Liability to Current Assets+124.8093*Cash Flow to Liability+0.5799*Fixed Assets to Assets <= 27.204811662637134 ; 10 ; 0.21 ; 0.3000000000000002 
4) ; Net Income to Total Assets <= 0.5275879786937705 ; 2 ; 0.0 ; 1.0000000000000002 ; *
4) ; Net Income to Total Assets > 0.5275879786937705 ; 8 ; 0.1094 ; 0.12500000000000022 
5) ; Fixed Assets to Assets <= 0.06726096476194895 ; 1 ; 0.0 ; 1.0000000000000002 ; *
5) ; Fixed Assets to Assets > 0.06726096476194895 ; 7 ; 0.0 ; 2.220446049250313e-16 ; *
3) ; 2.6078*Current Liability to Current Assets+124.8093*Cash Flow to Liability+0.5799*Fixed Assets to Assets > 27.204811662637134 ; 4 ; 0.0 ; 1.0000000000000002 ; *
2) ; Debt ratio % > 0.175393778154004 ; 18 ; 0.0 ; 1.0000000000000002 ; *

Constructed tree for not_local_not_global:

started at 2023-06-27 16:42:47.868611
Tree is traversed via depth-first traversal.
Node level) splitting rule to current node ; #data points ; impurity (Gini for classification, MSE for regression) ; average y_value (regression) or relative frequency of class 1 (classification) ; star (*) if node is leaf
0) ; root ; 50 ; 0.25 ; 0.5000000000000002 
1) ; Net Income to Total Assets <= 0.5195502325878005 ; 18 ; 0.0 ; 2.220446049250313e-16 ; *
1) ; Net Income to Total Assets > 0.5195502325878005 ; 32 ; 0.1709 ; 0.7812500000000002 
2) ; Debt ratio % <= 0.175393778154004 ; 14 ; 0.25 ; 0.5000000000000002 
3) ; -1.9534*Debt ratio %+-1.8024*Current Liability to Current Assets+108.989*Cash Flow to Liability+-6.9076*Net Income to Total Assets+1.3613*Fixed Assets to Assets <= 19.65130485991547 ; 7 ; 0.1224 ; 0.14285714285714307 
4) ; Fixed Assets to Assets <= 0.06726096476194895 ; 1 ; 0.0 ; 1.0000000000000002 ; *
4) ; Fixed Assets to Assets > 0.06726096476194895 ; 6 ; 0.0 ; 2.220446049250313e-16 ; *
3) ; -1.9534*Debt ratio %+-1.8024*Current Liability to Current Assets+108.989*Cash Flow to Liability+-6.9076*Net Income to Total Assets+1.3613*Fixed Assets to Assets > 19.65130485991547 ; 7 ; 0.1224 ; 0.8571428571428573 
4) ; Net Income to Total Assets <= 0.560566556677504 ; 5 ; 0.0 ; 1.0000000000000002 ; *
4) ; Net Income to Total Assets > 0.560566556677504 ; 2 ; 0.25 ; 0.5000000000000002 
5) ; Debt ratio % <= 0.127838074795175 ; 1 ; 0.0 ; 1.0000000000000002 ; *
5) ; Debt ratio % > 0.127838074795175 ; 1 ; 0.0 ; 2.220446049250313e-16 ; *
2) ; Debt ratio % > 0.175393778154004 ; 18 ; 0.0 ; 1.0000000000000002 ; *
/Users/mac/Desktop/Classifier/stats.py:271: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.
  print(df.to_latex(caption=f"Experiments run for algorithm: {ALGORITHMLIST[idx]}.", label=f"table:experiments_{path}_{ALGORITHMLIST[idx]}"))
\begin{table}
\centering
\caption{Experiments run for algorithm: local_global.}
\label{table:experiments_classification_local_global}
\begin{tabular}{lrrrrr}
\toprule
{} &   Accuracy &        F1 &      Auroc &  Precision &     Recall \\
\midrule
Bankrupt &   0.774359 &   0.76087 &   0.774359 &   0.809249 &   0.717949 \\
Compas   &   5.000000 &   6.00000 &   7.000000 &   8.000000 &   9.000000 \\
Credit   &  10.000000 &  11.00000 &  12.000000 &  13.000000 &  14.000000 \\
Haberman &  15.000000 &  16.00000 &  17.000000 &  18.000000 &  19.000000 \\
Water    &  20.000000 &  21.00000 &  22.000000 &  23.000000 &  24.000000 \\
\bottomrule
\end{tabular}
\end{table}

/Users/mac/Desktop/Classifier/stats.py:271: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.
  print(df.to_latex(caption=f"Experiments run for algorithm: {ALGORITHMLIST[idx]}.", label=f"table:experiments_{path}_{ALGORITHMLIST[idx]}"))
\begin{table}
\centering
\caption{Experiments run for algorithm: not_local_global.}
\label{table:experiments_classification_not_local_global}
\begin{tabular}{lrrrrr}
\toprule
{} &   Accuracy &         F1 &      Auroc &  Precision &     Recall \\
\midrule
Bankrupt &   0.751282 &   0.790497 &   0.751282 &   0.682836 &   0.938462 \\
Compas   &  30.000000 &  31.000000 &  32.000000 &  33.000000 &  34.000000 \\
Credit   &  35.000000 &  36.000000 &  37.000000 &  38.000000 &  39.000000 \\
Haberman &  40.000000 &  41.000000 &  42.000000 &  43.000000 &  44.000000 \\
Water    &  45.000000 &  46.000000 &  47.000000 &  48.000000 &  49.000000 \\
\bottomrule
\end{tabular}
\end{table}

/Users/mac/Desktop/Classifier/stats.py:271: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.
  print(df.to_latex(caption=f"Experiments run for algorithm: {ALGORITHMLIST[idx]}.", label=f"table:experiments_{path}_{ALGORITHMLIST[idx]}"))
\begin{table}
\centering
\caption{Experiments run for algorithm: local_not_global.}
\label{table:experiments_classification_local_not_global}
\begin{tabular}{lrrrrr}
\toprule
{} &   Accuracy &         F1 &      Auroc &  Precision &  Recall \\
\midrule
Bankrupt &   0.758974 &   0.768473 &   0.758974 &   0.739336 &     0.8 \\
Compas   &  55.000000 &  56.000000 &  57.000000 &  58.000000 &    59.0 \\
Credit   &  60.000000 &  61.000000 &  62.000000 &  63.000000 &    64.0 \\
Haberman &  65.000000 &  66.000000 &  67.000000 &  68.000000 &    69.0 \\
Water    &  70.000000 &  71.000000 &  72.000000 &  73.000000 &    74.0 \\
\bottomrule
\end{tabular}
\end{table}

/Users/mac/Desktop/Classifier/stats.py:271: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.
  print(df.to_latex(caption=f"Experiments run for algorithm: {ALGORITHMLIST[idx]}.", label=f"table:experiments_{path}_{ALGORITHMLIST[idx]}"))
\begin{table}
\centering
\caption{Experiments run for algorithm: not_local_not_global.}
\label{table:experiments_classification_not_local_not_global}
\begin{tabular}{lrrrrr}
\toprule
{} &   Accuracy &         F1 &      Auroc &  Precision &     Recall \\
\midrule
Bankrupt &   0.720513 &   0.721228 &   0.720513 &   0.719388 &   0.723077 \\
Compas   &  80.000000 &  81.000000 &  82.000000 &  83.000000 &  84.000000 \\
Credit   &  85.000000 &  86.000000 &  87.000000 &  88.000000 &  89.000000 \\
Haberman &  90.000000 &  91.000000 &  92.000000 &  93.000000 &  94.000000 \\
Water    &  95.000000 &  96.000000 &  97.000000 &  98.000000 &  99.000000 \\
\bottomrule
\end{tabular}
\end{table}

[[[ 0.77435897  0.76086957  0.77435897  0.80924855  0.71794872]
  [ 5.          6.          7.          8.          9.        ]
  [10.         11.         12.         13.         14.        ]
  [15.         16.         17.         18.         19.        ]
  [20.         21.         22.         23.         24.        ]]

 [[ 0.75128205  0.79049676  0.75128205  0.68283582  0.93846154]
  [30.         31.         32.         33.         34.        ]
  [35.         36.         37.         38.         39.        ]
  [40.         41.         42.         43.         44.        ]
  [45.         46.         47.         48.         49.        ]]

 [[ 0.75897436  0.76847291  0.75897436  0.73933649  0.8       ]
  [55.         56.         57.         58.         59.        ]
  [60.         61.         62.         63.         64.        ]
  [65.         66.         67.         68.         69.        ]
  [70.         71.         72.         73.         74.        ]]

 [[ 0.72051282  0.72122762  0.72051282  0.71938776  0.72307692]
  [80.         81.         82.         83.         84.        ]
  [85.         86.         87.         88.         89.        ]
  [90.         91.         92.         93.         94.        ]
  [95.         96.         97.         98.         99.        ]]]

  n = 100:
  Constructed tree for local_global:

started at 2023-06-27 16:51:27.847821
ordermatrix:
[[0 1]
 [0 0]]
Tree is traversed via depth-first traversal.
Node level) splitting rule to current node ; #data points ; impurity (Gini for classification, MSE for regression) ; average y_value (regression) or relative frequency of class 1 (classification) ; star (*) if node is leaf
0) ; root ; 100 ; 0.25 ; 0.5000000000000002 
1) ; 3.6296*Debt ratio %+0.4251*Current Liability to Current Assets+2.4832*Net Income to Total Assets+0.0*Fixed Assets to Assets <= 1.9805631893242297 ; 58 ; 0.1537 ; 0.18965517241379354 ; *
1) ; 3.6296*Debt ratio %+0.4251*Current Liability to Current Assets+2.4832*Net Income to Total Assets+0.0*Fixed Assets to Assets > 1.9805631893242297 ; 42 ; 0.0663 ; 0.928571428571429 ; *

Constructed tree for not_local_global:

started at 2023-06-27 16:51:30.008834
ordermatrix:
[[0 1]
 [1 0]]
ordermatrix:
[[0]]
Tree is traversed via depth-first traversal.
Node level) splitting rule to current node ; #data points ; impurity (Gini for classification, MSE for regression) ; average y_value (regression) or relative frequency of class 1 (classification) ; star (*) if node is leaf
0) ; root ; 100 ; 0.25 ; 0.5000000000000004 ; *

Constructed tree for local_not_global:

started at 2023-06-27 16:51:31.925807
Tree is traversed via depth-first traversal.
Node level) splitting rule to current node ; #data points ; impurity (Gini for classification, MSE for regression) ; average y_value (regression) or relative frequency of class 1 (classification) ; star (*) if node is leaf
0) ; root ; 100 ; 0.25 ; 0.5000000000000002 
1) ; 3.6296*Debt ratio %+0.4251*Current Liability to Current Assets+2.4832*Net Income to Total Assets+0.0*Fixed Assets to Assets <= 1.9805631893242297 ; 58 ; 0.1537 ; 0.18965517241379332 ; *
1) ; 3.6296*Debt ratio %+0.4251*Current Liability to Current Assets+2.4832*Net Income to Total Assets+0.0*Fixed Assets to Assets > 1.9805631893242297 ; 42 ; 0.0663 ; 0.9285714285714288 ; *

Constructed tree for not_local_not_global:

started at 2023-06-27 16:51:33.991731
Tree is traversed via depth-first traversal.
Node level) splitting rule to current node ; #data points ; impurity (Gini for classification, MSE for regression) ; average y_value (regression) or relative frequency of class 1 (classification) ; star (*) if node is leaf
0) ; root ; 100 ; 0.25 ; 0.5000000000000002 
1) ; 3.5315*Debt ratio %+0.4073*Current Liability to Current Assets+-2.9283*Cash Flow to Liability+2.6993*Net Income to Total Assets+0.0*Fixed Assets to Assets <= 1.437842076444347 ; 55 ; 0.1369 ; 0.16363636363636386 ; *
1) ; 3.5315*Debt ratio %+0.4073*Current Liability to Current Assets+-2.9283*Cash Flow to Liability+2.6993*Net Income to Total Assets+0.0*Fixed Assets to Assets > 1.437842076444347 ; 45 ; 0.081 ; 0.9111111111111113 ; *
/Users/mac/Desktop/Classifier/stats.py:267: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.
  print(df.to_latex(caption=f"Experiments run for algorithm: {ALGORITHMLIST[idx]}.", label=f"table:experiments_{path}_{ALGORITHMLIST[idx]}"))
\begin{table}
\centering
\caption{Experiments run for algorithm: local_global.}
\label{table:experiments_classification_local_global}
\begin{tabular}{lrrrrr}
\toprule
{} &   Accuracy &         F1 &      Auroc &  Precision &     Recall \\
\midrule
Bankrupt &   0.817647 &   0.805031 &   0.817647 &   0.864865 &   0.752941 \\
Compas   &   5.000000 &   6.000000 &   7.000000 &   8.000000 &   9.000000 \\
Credit   &  10.000000 &  11.000000 &  12.000000 &  13.000000 &  14.000000 \\
Haberman &  15.000000 &  16.000000 &  17.000000 &  18.000000 &  19.000000 \\
Water    &  20.000000 &  21.000000 &  22.000000 &  23.000000 &  24.000000 \\
\bottomrule
\end{tabular}
\end{table}

/Users/mac/Desktop/Classifier/stats.py:267: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.
  print(df.to_latex(caption=f"Experiments run for algorithm: {ALGORITHMLIST[idx]}.", label=f"table:experiments_{path}_{ALGORITHMLIST[idx]}"))
\begin{table}
\centering
\caption{Experiments run for algorithm: not_local_global.}
\label{table:experiments_classification_not_local_global}
\begin{tabular}{lrrrrr}
\toprule
{} &  Accuracy &         F1 &  Auroc &  Precision &  Recall \\
\midrule
Bankrupt &       0.5 &   0.666667 &    0.5 &        0.5 &     1.0 \\
Compas   &      30.0 &  31.000000 &   32.0 &       33.0 &    34.0 \\
Credit   &      35.0 &  36.000000 &   37.0 &       38.0 &    39.0 \\
Haberman &      40.0 &  41.000000 &   42.0 &       43.0 &    44.0 \\
Water    &      45.0 &  46.000000 &   47.0 &       48.0 &    49.0 \\
\bottomrule
\end{tabular}
\end{table}

/Users/mac/Desktop/Classifier/stats.py:267: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.
  print(df.to_latex(caption=f"Experiments run for algorithm: {ALGORITHMLIST[idx]}.", label=f"table:experiments_{path}_{ALGORITHMLIST[idx]}"))
\begin{table}
\centering
\caption{Experiments run for algorithm: local_not_global.}
\label{table:experiments_classification_local_not_global}
\begin{tabular}{lrrrrr}
\toprule
{} &   Accuracy &         F1 &      Auroc &  Precision &     Recall \\
\midrule
Bankrupt &   0.817647 &   0.805031 &   0.817647 &   0.864865 &   0.752941 \\
Compas   &  55.000000 &  56.000000 &  57.000000 &  58.000000 &  59.000000 \\
Credit   &  60.000000 &  61.000000 &  62.000000 &  63.000000 &  64.000000 \\
Haberman &  65.000000 &  66.000000 &  67.000000 &  68.000000 &  69.000000 \\
Water    &  70.000000 &  71.000000 &  72.000000 &  73.000000 &  74.000000 \\
\bottomrule
\end{tabular}
\end{table}

/Users/mac/Desktop/Classifier/stats.py:267: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.
  print(df.to_latex(caption=f"Experiments run for algorithm: {ALGORITHMLIST[idx]}.", label=f"table:experiments_{path}_{ALGORITHMLIST[idx]}"))
\begin{table}
\centering
\caption{Experiments run for algorithm: not_local_not_global.}
\label{table:experiments_classification_not_local_not_global}
\begin{tabular}{lrrrrr}
\toprule
{} &   Accuracy &         F1 &      Auroc &  Precision &     Recall \\
\midrule
Bankrupt &   0.811765 &   0.804878 &   0.811765 &   0.835443 &   0.776471 \\
Compas   &  80.000000 &  81.000000 &  82.000000 &  83.000000 &  84.000000 \\
Credit   &  85.000000 &  86.000000 &  87.000000 &  88.000000 &  89.000000 \\
Haberman &  90.000000 &  91.000000 &  92.000000 &  93.000000 &  94.000000 \\
Water    &  95.000000 &  96.000000 &  97.000000 &  98.000000 &  99.000000 \\
\bottomrule
\end{tabular}
\end{table}

[[[ 0.81764706  0.80503145  0.81764706  0.86486486  0.75294118]
  [ 5.          6.          7.          8.          9.        ]
  [10.         11.         12.         13.         14.        ]
  [15.         16.         17.         18.         19.        ]
  [20.         21.         22.         23.         24.        ]]

 [[ 0.5         0.66666667  0.5         0.5         1.        ]
  [30.         31.         32.         33.         34.        ]
  [35.         36.         37.         38.         39.        ]
  [40.         41.         42.         43.         44.        ]
  [45.         46.         47.         48.         49.        ]]

 [[ 0.81764706  0.80503145  0.81764706  0.86486486  0.75294118]
  [55.         56.         57.         58.         59.        ]
  [60.         61.         62.         63.         64.        ]
  [65.         66.         67.         68.         69.        ]
  [70.         71.         72.         73.         74.        ]]

 [[ 0.81176471  0.80487805  0.81176471  0.83544304  0.77647059]
  [80.         81.         82.         83.         84.        ]
  [85.         86.         87.         88.         89.        ]
  [90.         91.         92.         93.         94.        ]
  [95.         96.         97.         98.         99.        ]]]

  n=150:

  Constructed tree for local_global:

started at 2023-06-27 16:55:54.221620
ordermatrix:
[[0 1]
 [0 0]]
Tree is traversed via depth-first traversal.
Node level) splitting rule to current node ; #data points ; impurity (Gini for classification, MSE for regression) ; average y_value (regression) or relative frequency of class 1 (classification) ; star (*) if node is leaf
0) ; root ; 150 ; 0.25 ; 0.5000000000000002 
1) ; 3.4476*Debt ratio %+1.2604*Current Liability to Current Assets+2.8987*Cash Flow to Liability+2.2207*Net Income to Total Assets+0.0*Fixed Assets to Assets <= 2.3868898225819883 ; 67 ; 0.0691 ; 0.07462686567164223 ; *
1) ; 3.4476*Debt ratio %+1.2604*Current Liability to Current Assets+2.8987*Cash Flow to Liability+2.2207*Net Income to Total Assets+0.0*Fixed Assets to Assets > 2.3868898225819883 ; 83 ; 0.1321 ; 0.8433734939759041 ; *

Constructed tree for not_local_global:

started at 2023-06-27 16:55:57.181943
ordermatrix:
[[0 1]
 [0 0]]
Tree is traversed via depth-first traversal.
Node level) splitting rule to current node ; #data points ; impurity (Gini for classification, MSE for regression) ; average y_value (regression) or relative frequency of class 1 (classification) ; star (*) if node is leaf
0) ; root ; 150 ; 0.25 ; 0.5000000000000002 
1) ; 3.4476*Debt ratio %+1.2604*Current Liability to Current Assets+2.8987*Cash Flow to Liability+2.2207*Net Income to Total Assets+0.0*Fixed Assets to Assets <= 2.386889833090712 ; 67 ; 0.0691 ; 0.07462686567164223 ; *
1) ; 3.4476*Debt ratio %+1.2604*Current Liability to Current Assets+2.8987*Cash Flow to Liability+2.2207*Net Income to Total Assets+0.0*Fixed Assets to Assets > 2.386889833090712 ; 83 ; 0.1321 ; 0.8433734939759041 ; *

Constructed tree for local_not_global:

started at 2023-06-27 16:56:00.115640
Tree is traversed via depth-first traversal.
Node level) splitting rule to current node ; #data points ; impurity (Gini for classification, MSE for regression) ; average y_value (regression) or relative frequency of class 1 (classification) ; star (*) if node is leaf
0) ; root ; 150 ; 0.25 ; 0.5000000000000002 
1) ; 3.4476*Debt ratio %+1.2604*Current Liability to Current Assets+2.8987*Cash Flow to Liability+2.2207*Net Income to Total Assets+0.0*Fixed Assets to Assets <= 2.3868898225819883 ; 67 ; 0.0691 ; 0.074626865671642 ; *
1) ; 3.4476*Debt ratio %+1.2604*Current Liability to Current Assets+2.8987*Cash Flow to Liability+2.2207*Net Income to Total Assets+0.0*Fixed Assets to Assets > 2.3868898225819883 ; 83 ; 0.1321 ; 0.8433734939759039 ; *

Constructed tree for not_local_not_global:

started at 2023-06-27 16:56:03.004526
Tree is traversed via depth-first traversal.
Node level) splitting rule to current node ; #data points ; impurity (Gini for classification, MSE for regression) ; average y_value (regression) or relative frequency of class 1 (classification) ; star (*) if node is leaf
0) ; root ; 150 ; 0.25 ; 0.5000000000000002 
1) ; 3.4476*Debt ratio %+1.2604*Current Liability to Current Assets+2.8987*Cash Flow to Liability+2.2207*Net Income to Total Assets+0.0*Fixed Assets to Assets <= 2.386889833090712 ; 67 ; 0.0691 ; 0.074626865671642 ; *
1) ; 3.4476*Debt ratio %+1.2604*Current Liability to Current Assets+2.8987*Cash Flow to Liability+2.2207*Net Income to Total Assets+0.0*Fixed Assets to Assets > 2.386889833090712 ; 83 ; 0.1321 ; 0.8433734939759039 ; *
/Users/mac/Desktop/Classifier/stats.py:267: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.
  print(df.to_latex(caption=f"Experiments run for algorithm: {ALGORITHMLIST[idx]}.", label=f"table:experiments_{path}_{ALGORITHMLIST[idx]}"))
\begin{table}
\centering
\caption{Experiments run for algorithm: local_global.}
\label{table:experiments_classification_local_global}
\begin{tabular}{lrrrrr}
\toprule
{} &  Accuracy &         F1 &     Auroc &  Precision &     Recall \\
\midrule
Bankrupt &   0.82069 &   0.823129 &   0.82069 &   0.812081 &   0.834483 \\
Compas   &   5.00000 &   6.000000 &   7.00000 &   8.000000 &   9.000000 \\
Credit   &  10.00000 &  11.000000 &  12.00000 &  13.000000 &  14.000000 \\
Haberman &  15.00000 &  16.000000 &  17.00000 &  18.000000 &  19.000000 \\
Water    &  20.00000 &  21.000000 &  22.00000 &  23.000000 &  24.000000 \\
\bottomrule
\end{tabular}
\end{table}

/Users/mac/Desktop/Classifier/stats.py:267: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.
  print(df.to_latex(caption=f"Experiments run for algorithm: {ALGORITHMLIST[idx]}.", label=f"table:experiments_{path}_{ALGORITHMLIST[idx]}"))
\begin{table}
\centering
\caption{Experiments run for algorithm: not_local_global.}
\label{table:experiments_classification_not_local_global}
\begin{tabular}{lrrrrr}
\toprule
{} &  Accuracy &         F1 &     Auroc &  Precision &     Recall \\
\midrule
Bankrupt &   0.82069 &   0.823129 &   0.82069 &   0.812081 &   0.834483 \\
Compas   &  30.00000 &  31.000000 &  32.00000 &  33.000000 &  34.000000 \\
Credit   &  35.00000 &  36.000000 &  37.00000 &  38.000000 &  39.000000 \\
Haberman &  40.00000 &  41.000000 &  42.00000 &  43.000000 &  44.000000 \\
Water    &  45.00000 &  46.000000 &  47.00000 &  48.000000 &  49.000000 \\
\bottomrule
\end{tabular}
\end{table}

/Users/mac/Desktop/Classifier/stats.py:267: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.
  print(df.to_latex(caption=f"Experiments run for algorithm: {ALGORITHMLIST[idx]}.", label=f"table:experiments_{path}_{ALGORITHMLIST[idx]}"))
\begin{table}
\centering
\caption{Experiments run for algorithm: local_not_global.}
\label{table:experiments_classification_local_not_global}
\begin{tabular}{lrrrrr}
\toprule
{} &  Accuracy &         F1 &     Auroc &  Precision &     Recall \\
\midrule
Bankrupt &   0.82069 &   0.823129 &   0.82069 &   0.812081 &   0.834483 \\
Compas   &  55.00000 &  56.000000 &  57.00000 &  58.000000 &  59.000000 \\
Credit   &  60.00000 &  61.000000 &  62.00000 &  63.000000 &  64.000000 \\
Haberman &  65.00000 &  66.000000 &  67.00000 &  68.000000 &  69.000000 \\
Water    &  70.00000 &  71.000000 &  72.00000 &  73.000000 &  74.000000 \\
\bottomrule
\end{tabular}
\end{table}

/Users/mac/Desktop/Classifier/stats.py:267: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.
  print(df.to_latex(caption=f"Experiments run for algorithm: {ALGORITHMLIST[idx]}.", label=f"table:experiments_{path}_{ALGORITHMLIST[idx]}"))
\begin{table}
\centering
\caption{Experiments run for algorithm: not_local_not_global.}
\label{table:experiments_classification_not_local_not_global}
\begin{tabular}{lrrrrr}
\toprule
{} &  Accuracy &         F1 &     Auroc &  Precision &     Recall \\
\midrule
Bankrupt &   0.82069 &   0.823129 &   0.82069 &   0.812081 &   0.834483 \\
Compas   &  80.00000 &  81.000000 &  82.00000 &  83.000000 &  84.000000 \\
Credit   &  85.00000 &  86.000000 &  87.00000 &  88.000000 &  89.000000 \\
Haberman &  90.00000 &  91.000000 &  92.00000 &  93.000000 &  94.000000 \\
Water    &  95.00000 &  96.000000 &  97.00000 &  98.000000 &  99.000000 \\
\bottomrule
\end{tabular}
\end{table}

[[[ 0.82068966  0.82312925  0.82068966  0.81208054  0.83448276]
  [ 5.          6.          7.          8.          9.        ]
  [10.         11.         12.         13.         14.        ]
  [15.         16.         17.         18.         19.        ]
  [20.         21.         22.         23.         24.        ]]

 [[ 0.82068966  0.82312925  0.82068966  0.81208054  0.83448276]
  [30.         31.         32.         33.         34.        ]
  [35.         36.         37.         38.         39.        ]
  [40.         41.         42.         43.         44.        ]
  [45.         46.         47.         48.         49.        ]]

 [[ 0.82068966  0.82312925  0.82068966  0.81208054  0.83448276]
  [55.         56.         57.         58.         59.        ]
  [60.         61.         62.         63.         64.        ]
  [65.         66.         67.         68.         69.        ]
  [70.         71.         72.         73.         74.        ]]

 [[ 0.82068966  0.82312925  0.82068966  0.81208054  0.83448276]
  [80.         81.         82.         83.         84.        ]
  [85.         86.         87.         88.         89.        ]
  [90.         91.         92.         93.         94.        ]
  [95.         96.         97.         98.         99.        ]]]